/***********************************************************************
    filename:   SILLYImageLoaderManager.icpp 
    created:    10 Jun 2006
    author:     Olivier Delannoy

    purpose:    Inline definition for ImageLoaderManager class   
*************************************************************************/
/***************************************************************************
 *   Copyright (C) 2004 - 2006 Paul D Turner & The CEGUI Development Team
 *
 *   Permission is hereby granted, free of charge, to any person obtaining
 *   a copy of this software and associated documentation files (the
 *   "Software"), to deal in the Software without restriction, including
 *   without limitation the rights to use, copy, modify, merge, publish,
 *   distribute, sublicense, and/or sell copies of the Software, and to
 *   permit persons to whom the Software is furnished to do so, subject to
 *   the following conditions:
 *
 *   The above copyright notice and this permission notice shall be
 *   included in all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *   OTHER DEALINGS IN THE SOFTWARE.
 ***************************************************************************/

// Start of section namespace SILLY
namespace SILLY
{
inline ImageLoaderList::iterator ImageLoaderManager::begin()
{
    return d_loaders.begin();
}

inline ImageLoaderList::iterator ImageLoaderManager::end() 
{
    return d_loaders.end();
}

inline ImageLoaderManager* ImageLoaderManager::getSingletonPtr()
{
    return d_instance;
}

inline ImageLoaderManager& ImageLoaderManager::getSingleton()
{
    assert(d_instance && "ASSERT: Singleton object not yet created");
    return *d_instance;
}

inline void ImageLoaderManager::add(ImageLoader* loader)
{
    assert(loader && "ASSERT: adding a none existing loader object");
    d_loaders.push_back(loader);
}

} // End of section namespace SILLY

